import { Field, ID, ObjectType } from '@nestjs/graphql';
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, SchemaTypes } from 'mongoose';
import { Article } from '../article/article.schema';
import { AppSchemaId } from '../common/common.interface';
import { User } from '../user/user.schema';

/**
 * Page Schema and GraphQL DTO Object
 */
@ObjectType()
@Schema({ timestamps: true })
export class Page {
  @Field(() => ID)
  _id: AppSchemaId;

  @Field(() => ID)
  @Prop({ type: SchemaTypes.ObjectId, ref: User.name })
  authorId: AppSchemaId;

  @Field(() => String)
  @Prop({
    unique: true,
  })
  slug: string;

  @Field(() => String)
  @Prop()
  title: string;

  @Field(() => [Article])
  @Prop({ type: [SchemaTypes.ObjectId], ref: Article.name })
  articles: Article[];

  /**
   * Here just field for graphql since property has been declared within `@Schema()`.
   * Autogenerated by mongo
   */
  @Field()
  readonly createdAt: Date;

  /**
   * Here just field for graphql since property has been declared within `@Schema()`.
   * Autogenerated by mongo
   */
  @Field()
  readonly updatedAt: Date;
}

export const PageSchema = SchemaFactory.createForClass(Page);

export type PageDocument = Page & Document;
