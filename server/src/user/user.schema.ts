import { Field, ID, ObjectType } from '@nestjs/graphql';
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import * as bcrypt from 'bcrypt';
import { Document, SchemaTypes, UpdateQuery } from 'mongoose';
import { AppSchemaId } from '../common/common.interface';

/**
 * User Schema and GraphQL DTO Object
 */
@ObjectType()
@Schema({ timestamps: true })
export class User {
  @Field(() => ID)
  _id: AppSchemaId;

  @Field(() => String)
  @Prop({
    unique: true,
  })
  username: string;

  @Field(() => Boolean)
  @Prop({
    type: Boolean,
    required: false,
    default: false,
  })
  isAdmin?: boolean;

  @Field(() => ID)
  @Prop({
    type: SchemaTypes.ObjectId,
    ref: User.name,
    required: false,
    default: null,
  })
  createdBy?: AppSchemaId;

  @Field(() => ID)
  @Prop({
    type: SchemaTypes.ObjectId,
    ref: User.name,
    required: false,
    default: null,
  })
  updatedBy?: AppSchemaId;

  /**
   * No `password` property by default
   * But you can explicitly select it
   *
   * `User.findById(user._id).select('+password')`
   */
  @Prop({ type: String, select: false })
  password?: string;

  /**
   * Here just field for graphql since property has been declared within `@Schema()`.
   * Autogenerated by mongo
   */
  @Field()
  readonly createdAt: Date;

  /**
   * Here just field for graphql since property has been declared within `@Schema()`.
   * Autogenerated by mongo
   */
  @Field()
  readonly updatedAt: Date;
}

/**
 * TODO: refactor pre callback to a decorator similar to
 * `@BeforeInsert()` from typeorm
 */
export const UserSchema = SchemaFactory.createForClass(User)
  .pre('save', async function preSaveClbk() {
    if (this.isModified('password')) {
      this.password = await bcrypt.hash(this.password, 10);
    }
  })
  .pre('findOneAndUpdate', async function preUpdateClbk(next) {
    const user: UpdateQuery<User> = this.getUpdate();

    if (user.password) {
      user.password = await bcrypt.hash(user.password, 10);
    }

    next();
  });

export type UserDocument = User & Document;
