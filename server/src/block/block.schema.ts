import { Field, ID, ObjectType } from '@nestjs/graphql';
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, SchemaTypes } from 'mongoose';
import { AppSchemaId } from '../common/common.interface';
import { User } from '../user/user.schema';
import { BlockType } from './block.interface';

/**
 * Page Schema and GraphQL DTO Object
 */
@ObjectType({ isAbstract: true })
@Schema({ timestamps: true })
export class Block {
  @Field(() => ID)
  _id: AppSchemaId;

  @Field(() => ID)
  @Prop({ type: SchemaTypes.ObjectId, ref: User.name })
  authorId: AppSchemaId;

  @Field(() => String)
  @Prop()
  name: string;

  @Field(() => BlockType)
  @Prop({
    type: String,
    enum: Object.keys(BlockType)
      .map((k) => BlockType[k])
      .map((v) => v),
  })
  kind: BlockType;

  /**
   * Here just field for graphql since property has been declared within `@Schema()`.
   * Autogenerated by mongo
   */
  @Field()
  readonly createdAt: Date;

  /**
   * Here just field for graphql since property has been declared within `@Schema()`.
   * Autogenerated by mongo
   */
  @Field()
  readonly updatedAt: Date;
}

export const BlockSchema = SchemaFactory.createForClass(Block);

export type BlockDocument = Block & Document;
